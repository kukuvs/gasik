# Generated by Django 5.2 on 2025-04-14 15:19

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название события')),
                ('description', models.TextField(max_length=2000, verbose_name='Описание')),
                ('start', models.DateField(verbose_name='Дата начала')),
                ('end', models.DateField(verbose_name='Дата окончания')),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, verbose_name='Название проекта')),
                ('description', models.TextField(max_length=1000, verbose_name='Описание')),
                ('date_proj', models.DateField(verbose_name='Дата проекта')),
                ('url', models.URLField(max_length=255, verbose_name='Ссылка')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
            },
        ),
        migrations.CreateModel(
            name='Corporation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название компании')),
                ('description', models.TextField(verbose_name='Описание')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
            ],
            options={
                'verbose_name': 'Корпорация',
                'verbose_name_plural': 'Корпорации',
                'indexes': [models.Index(fields=['name'], name='corp_name_idx')],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, unique=True, verbose_name='Название навыка')),
            ],
            options={
                'verbose_name': 'Навык',
                'verbose_name_plural': 'Навыки',
                'indexes': [models.Index(fields=['title'], name='skill_title_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message="Телефон должен содержать цифры, символы '+' и '-'", regex='^\\+?[\\d\\-]+$')], verbose_name='Телефон')),
                ('email', models.EmailField(max_length=250, unique=True, verbose_name='Email')),
                ('age', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Возраст')),
                ('rating', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999)], verbose_name='Рейтинг')),
                ('notifications', models.BooleanField(default=True, verbose_name='Уведомления')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата регистрации')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Администратор')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='SkillUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Git_Gas.skill', verbose_name='Навык')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Связь Навык/Пользователь',
                'verbose_name_plural': 'Навыки пользователей',
            },
        ),
        migrations.CreateModel(
            name='ProjectUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Git_Gas.project', verbose_name='Проект')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Связь Проект/Пользователь',
                'verbose_name_plural': 'Участники проектов',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='main_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL, verbose_name='Основной пользователь'),
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(related_name='projects', through='Git_Gas.ProjectUser', to=settings.AUTH_USER_MODEL, verbose_name='Участники проекта'),
        ),
        migrations.CreateModel(
            name='EventUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Git_Gas.event', verbose_name='Событие')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Связь Событие/Пользователь',
                'verbose_name_plural': 'Участники событий',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='users',
            field=models.ManyToManyField(related_name='events', through='Git_Gas.EventUser', to=settings.AUTH_USER_MODEL, verbose_name='Участники'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_email_idx'),
        ),
        migrations.AddIndex(
            model_name='skilluser',
            index=models.Index(fields=['user', 'skill'], name='user_skill_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skilluser',
            unique_together={('user', 'skill')},
        ),
        migrations.AddIndex(
            model_name='projectuser',
            index=models.Index(fields=['user', 'project'], name='user_project_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projectuser',
            unique_together={('user', 'project')},
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['title'], name='project_title_idx'),
        ),
        migrations.AddIndex(
            model_name='eventuser',
            index=models.Index(fields=['user', 'event'], name='user_event_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventuser',
            unique_together={('user', 'event')},
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start', 'end'], name='event_date_idx'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(condition=models.Q(('start__lt', models.F('end'))), name='start_before_end'),
        ),
    ]
